name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  check-secret:
    uses: KSP-RO/BuildTools/.github/workflows/check-secret.yml@master
    secrets:
      KSP_ZIP_PASSWORD: ${{ secrets.KSP_ZIP_PASSWORD }}
  validate-cfg-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Validate config files
        uses: KSP-CKAN/KSPMMCfgParser@master
  build:
    runs-on: ubuntu-latest
    needs: [check-secret]
    if: needs.check-secret.outputs.has-password == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 100

      - name: Download required assemblies
        id: download-assemblies
        uses: KSP-RO/BuildTools/download-assemblies@master
        with:
          KSP_ZIP_PASSWORD: ${{ secrets.KSP_ZIP_PASSWORD }}
          
      # Install .NET SDKs
      - name: Setup .NET Core 3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Setup .NET 5.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Update AssemblyInfo
        uses: KSP-RO/BuildTools/update-assembly-info@master
        with:
          path: ${GITHUB_WORKSPACE}/src/RealAntennasProject/Properties/AssemblyInfo.cs
          tag: "2.99.0.0"

      - name: Build mod solution
        run: |
          msbuild ${GITHUB_WORKSPACE}/src/RealAntennasProject.sln /t:build /restore /p:RestorePackagesConfig=true /p:Configuration=Release /p:ReferencePath="${{ steps.download-assemblies.outputs.ksp-dll-path }}"
          
      - name: Remove excess DLLs
        uses: KSP-RO/BuildTools/remove-excess-dlls@master
        with:
          path: ${GITHUB_WORKSPACE}/GameData/

      - name: Assemble release
        id: assemble-release
        run: |
          RELEASE_DIR="${RUNNER_TEMP}/release"
          echo "Release dir: ${RELEASE_DIR}"
          mkdir -v "${RELEASE_DIR}"
          echo "::set-output name=release-dir::${RELEASE_DIR}"
          cp -v -R "${GITHUB_WORKSPACE}/GameData/RealAntennas" "${RELEASE_DIR}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: RealAntennas
          path: ${{ steps.assemble-release.outputs.release-dir }}
